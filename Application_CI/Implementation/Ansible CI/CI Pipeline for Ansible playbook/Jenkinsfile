pipeline {
    agent any
    
    stages {
        stage('Checkout Stage') {
            steps {
                // Checkout the latest version of the Ansible playbook code from the repository
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: '890c8a72-7383-4986-8573-519aacdeb7d2', url: 'https://github.com/CodeOps-Hub/Jenkins-Playbook.git']])
            }
        }
        stage('Credential Scanning') {
            steps {
                sh 'wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz'
                // Extract Gitleaks
                sh 'tar xvzf gitleaks_8.18.2_linux_x64.tar.gz'
                sh './gitleaks detect -r credScanReport.json'
            }
        }
        stage('Linting Stage') {
            steps {
                script {
                    try {
                        // Use Ansible Lint to perform linting on your Ansible playbook
                        sh 'ansible-lint /var/lib/jenkins/workspace/Ansible_CI/jenkins_playbook/install_debian.yml -q > lint_report.txt'
                    } catch (Exception e) {
                        // Ignore linting errors
                        echo 'Linting completed with errors. Ignoring...'
                    }
                }
            }
        }
        stage('Syntax Checking Stage') {
            steps {
                script {
                    try {
                        // Run ansible-playbook with the --syntax-check option to validate playbook syntax
                        sh 'ansible-playbook /var/lib/jenkins/workspace/Ansible_CI/jenkins_playbook/install_debian.yml --syntax-check > syntaxcheck_report.txt'
                    } catch (Exception e) {
                        // Ignore syntax check errors
                        echo 'Syntax checking completed with errors. Ignoring...'
                    }
                }
            }
        }
        stage('Git Tag Stage') {
            steps {
                // Tag the version
                sh 'git tag -a v1.0 -m "Version 1.0"'
            }
        }
    }
}
